"""
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
"""
from time import time
from math import sqrt, ceil
from typing import Set


def triangle_generator():
    """
    Infinite triangle generator
    """
    i = 1
    current_triangle = i
    while True:
        yield current_triangle
        i += 1
        current_triangle += i


def get_divisors(x: int) -> Set[int]:
    divisors = set()
    if x < 4:
        return {1, x}
    for i in range(1, ceil(sqrt(x))):
        if x % i == 0:
            divisors.add(i)
            divisors.add(x//i)
    return divisors


def get_triangle(num_divisors=5):
    for i in triangle_generator():
        if len(get_divisors(i)) > num_divisors:
            return i

start_time = time()
result = get_triangle(num_divisors=500)
final_time = time()
print(f"The result {result} has been found in {final_time-start_time:.6f}s")

